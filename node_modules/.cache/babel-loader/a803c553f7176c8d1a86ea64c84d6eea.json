{"ast":null,"code":"var _jsxFileName = \"/home/agik/agik/projects/Studies/kargeno-client/src/views/UserDetails/components/Summary/Summary.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid } from '@material-ui/core';\nimport axios from 'utils/axios';\nimport { CustomerInfo, Invoices, SendEmails, OtherActions } from './components';\nimport { useParams } from 'react-router-dom';\nimport { FETCH_USERS } from '../../../../graphql/queries/app-queries';\nimport { apiFetchData } from 'store/api-actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\nconst Summary = props => {\n  _s();\n  const {\n    className,\n    ...rest\n  } = props;\n  const [user, setUsers] = useState([]);\n  const classes = useStyles();\n  const [customer, setCustomer] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n  const [todos, setTodos] = useState([]);\n  let {\n    id\n  } = useParams();\n  const userId = id;\n  const fetchUsers = async selectedUserId => {\n    console.log('Prams user', id);\n    await apiFetchData(FETCH_USERS, selectedUserId).then(user => {\n      console.log('Prams user ==================****FETCH_USERS************************************************* ', user.data.getUsers);\n      setUsers(user.data.getUsers);\n      if (user) {}\n    }); //\n  };\n\n  useEffect(() => {\n    fetchUsers(id);\n    return () => {\n      mounted = false;\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    ...rest,\n    className: clsx(classes.root, className),\n    container: true,\n    spacing: 3,\n    children: /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      lg: 4,\n      md: 6,\n      xl: 3,\n      xs: 12,\n      children: user.level ? /*#__PURE__*/_jsxDEV(CustomerInfo, {\n        user: user\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 25\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"No data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 57\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(Summary, \"icAksTILQm+tRKixkGD+bXNkego=\", false, function () {\n  return [useStyles, useParams];\n});\n_c = Summary;\nSummary.propTypes = {\n  className: PropTypes.string\n};\nexport default Summary;\nvar _c;\n$RefreshReg$(_c, \"Summary\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","PropTypes","clsx","makeStyles","Grid","axios","CustomerInfo","Invoices","SendEmails","OtherActions","useParams","FETCH_USERS","apiFetchData","useStyles","root","Summary","props","className","rest","user","setUsers","classes","customer","setCustomer","isLoading","setIsLoading","todos","setTodos","id","userId","fetchUsers","selectedUserId","console","log","then","data","getUsers","mounted","level","propTypes","string"],"sources":["/home/agik/agik/projects/Studies/kargeno-client/src/views/UserDetails/components/Summary/Summary.js"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { makeStyles } from '@material-ui/styles';\nimport { Grid } from '@material-ui/core';\n\nimport axios from 'utils/axios';\nimport { CustomerInfo, Invoices, SendEmails, OtherActions } from './components';\nimport {useParams } from 'react-router-dom';\n\nimport { FETCH_USERS } from '../../../../graphql/queries/app-queries'\nimport  {apiFetchData } from 'store/api-actions';\n\n\n\nconst useStyles = makeStyles(() => ({\n  root: {}\n}));\n\nconst Summary = props => {\n  const { className, ...rest } = props;\n  const [user, setUsers] = useState([]);\n\n\n  const classes = useStyles();\n  const [customer, setCustomer] = useState();\n  const [isLoading, setIsLoading] = useState(true);\n\n  const [todos, setTodos] = useState([]);\n  let { id } = useParams();\n\n  const userId = id;\n\n\n\n  const fetchUsers = async(selectedUserId) =>{\n    console.log('Prams user', id)\n  \n    await apiFetchData(FETCH_USERS,selectedUserId).then(user =>{\n      console.log('Prams user ==================****FETCH_USERS************************************************* ', user.data.getUsers);\n      setUsers(user.data.getUsers);\n      if(user){\n        \n      }\n    });//\n\n  }\n\n\n\n\n  useEffect(() => {\n\n    \n    fetchUsers(id);  \n   \n    return () => {\n      mounted = false;\n    };\n\n   \n  }, []);\n\n \n  return (\n    <Grid\n      {...rest}\n      className={clsx(classes.root, className)}\n      container\n      spacing={3}\n    >\n      <Grid\n        item\n        lg={4}\n        md={6}\n        xl={3}\n        xs={12}\n      >\n        {user.level ? ( <CustomerInfo user={user} /> ) :<p>No data</p>}\n        \n      </Grid>\n      {/*       <Grid\n          item\n          lg={4}\n          md={6}\n          xl={3}\n          xs={12}\n        >\n          <Invoices customer={customer} />\n        </Grid> */}\n      {/*  <Grid\n          item\n          lg={8}\n          md={8}\n          xl={8}\n          xs={12}\n        >\n          <SendEmails customer={customer} />\n        </Grid> */}\n        {/*       <Grid\n          item\n          lg={4}\n          md={6}\n          xl={3}\n          xs={12}\n        >\n          <OtherActions />\n        </Grid> */}\n      </Grid>\n    );\n  \n};\n\nSummary.propTypes = {\n  className: PropTypes.string\n};\n\nexport default Summary;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,IAAI,QAAQ,mBAAmB;AAExC,OAAOC,KAAK,MAAM,aAAa;AAC/B,SAASC,YAAY,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,YAAY,QAAQ,cAAc;AAC/E,SAAQC,SAAS,QAAQ,kBAAkB;AAE3C,SAASC,WAAW,QAAQ,yCAAyC;AACrE,SAASC,YAAY,QAAQ,mBAAmB;AAAC;AAIjD,MAAMC,SAAS,GAAGV,UAAU,CAAC,OAAO;EAClCW,IAAI,EAAE,CAAC;AACT,CAAC,CAAC,CAAC;AAEH,MAAMC,OAAO,GAAGC,KAAK,IAAI;EAAA;EACvB,MAAM;IAAEC,SAAS;IAAE,GAAGC;EAAK,CAAC,GAAGF,KAAK;EACpC,MAAM,CAACG,IAAI,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAAC,EAAE,CAAC;EAGrC,MAAMuB,OAAO,GAAGR,SAAS,EAAE;EAC3B,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGzB,QAAQ,EAAE;EAC1C,MAAM,CAAC0B,SAAS,EAAEC,YAAY,CAAC,GAAG3B,QAAQ,CAAC,IAAI,CAAC;EAEhD,MAAM,CAAC4B,KAAK,EAAEC,QAAQ,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EACtC,IAAI;IAAE8B;EAAG,CAAC,GAAGlB,SAAS,EAAE;EAExB,MAAMmB,MAAM,GAAGD,EAAE;EAIjB,MAAME,UAAU,GAAG,MAAMC,cAAc,IAAI;IACzCC,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEL,EAAE,CAAC;IAE7B,MAAMhB,YAAY,CAACD,WAAW,EAACoB,cAAc,CAAC,CAACG,IAAI,CAACf,IAAI,IAAG;MACzDa,OAAO,CAACC,GAAG,CAAC,gGAAgG,EAAEd,IAAI,CAACgB,IAAI,CAACC,QAAQ,CAAC;MACjIhB,QAAQ,CAACD,IAAI,CAACgB,IAAI,CAACC,QAAQ,CAAC;MAC5B,IAAGjB,IAAI,EAAC,CAER;IACF,CAAC,CAAC,CAAC;EAEL,CAAC;;EAKDpB,SAAS,CAAC,MAAM;IAGd+B,UAAU,CAACF,EAAE,CAAC;IAEd,OAAO,MAAM;MACXS,OAAO,GAAG,KAAK;IACjB,CAAC;EAGH,CAAC,EAAE,EAAE,CAAC;EAGN,oBACE,QAAC,IAAI;IAAA,GACCnB,IAAI;IACR,SAAS,EAAEhB,IAAI,CAACmB,OAAO,CAACP,IAAI,EAAEG,SAAS,CAAE;IACzC,SAAS;IACT,OAAO,EAAE,CAAE;IAAA,uBAEX,QAAC,IAAI;MACH,IAAI;MACJ,EAAE,EAAE,CAAE;MACN,EAAE,EAAE,CAAE;MACN,EAAE,EAAE,CAAE;MACN,EAAE,EAAE,EAAG;MAAA,UAENE,IAAI,CAACmB,KAAK,gBAAK,QAAC,YAAY;QAAC,IAAI,EAAEnB;MAAK;QAAA;QAAA;QAAA;MAAA,QAAG,gBAAI;QAAA,UAAG;MAAO;QAAA;QAAA;QAAA;MAAA;IAAI;MAAA;MAAA;MAAA;IAAA;EAEzD;IAAA;IAAA;IAAA;EAAA,QA4BA;AAGb,CAAC;AAAC,GA5FIJ,OAAO;EAAA,QAKKF,SAAS,EAKZH,SAAS;AAAA;AAAA,KAVlBK,OAAO;AA8FbA,OAAO,CAACwB,SAAS,GAAG;EAClBtB,SAAS,EAAEhB,SAAS,CAACuC;AACvB,CAAC;AAED,eAAezB,OAAO;AAAC;AAAA"},"metadata":{},"sourceType":"module"}