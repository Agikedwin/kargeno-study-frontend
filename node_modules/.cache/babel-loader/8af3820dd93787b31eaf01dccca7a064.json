{"ast":null,"code":"import { accessLevelActions } from './api-slice';\nimport { CREATE_ACCESS_LEVEL } from '../graphql/mutations/app-mutations';\nimport { async } from 'validate.js';\n\n//import { useMutation } from '@apollo/client';\n\nexport const apiFetchData = async (query, params) => {\n  let savedData = [];\n  console.log('Id passed with the query ', params);\n  try {\n    await fetch('http://localhost:3005/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: query,\n        variables: {\n          paramId: params\n        }\n      })\n    }).then(r => {\n      return r.json();\n    }).then(levels => {\n      savedData = levels;\n      console.log('FETCH AT ACTIONS ()', savedData);\n      // return (dispatch) => {\n      //   dispatch(accessLevelActions.apiFetchData([...savedData]));\n\n      // };\n    }).catch(error => {\n      throw Error(error);\n    });\n  } catch (error) {\n    throw Error(error);\n  }\n  return savedData;\n\n  /* return async (dispach) =>{\n    await dispach(accessLevelActions.apiFetchData(payload));\n  } */\n};\n\nexport const apiSaveData = async (payload, mutation) => {\n  console.log('payload ====== ', payload);\n  console.log('mutation ====== ', mutation);\n  let savedData = [];\n  try {\n    await fetch('http://localhost:3005/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        query: mutation,\n        // 2 dimensions array with all the elements at index 0, then loop the rest using i\n        variables: payload\n      })\n    }).then(r => {\n      return r.json();\n    }).then(data => {\n      savedData = data;\n      // return (dispatch) => {\n      //   dispatch(accessLevelActions.apiFetchData([...savedData]));\n\n      // };\n    }).catch(error => {\n      throw Error(error);\n    });\n  } catch (error) {\n    throw Error(error);\n  }\n  return savedData;\n};\nexport const getSelectedUser = data => {\n  return async dispach => {\n    await dispach(accessLevelActions.sele(data));\n  };\n};\nexport const showMessages = data => {\n  return async dispach => {\n    await dispach(accessLevelActions.apiFetchData(data));\n  };\n};","map":{"version":3,"names":["accessLevelActions","CREATE_ACCESS_LEVEL","async","apiFetchData","query","params","savedData","console","log","fetch","method","headers","body","JSON","stringify","variables","paramId","then","r","json","levels","catch","error","Error","apiSaveData","payload","mutation","data","getSelectedUser","dispach","sele","showMessages"],"sources":["/home/agik/agik/projects/Studies/kargeno-client/src/store/api-actions.js"],"sourcesContent":["import { accessLevelActions } from './api-slice';\n\nimport { CREATE_ACCESS_LEVEL } from '../graphql/mutations/app-mutations';\nimport { async } from 'validate.js';\n\n//import { useMutation } from '@apollo/client';\n\n\n\n\n\nexport const apiFetchData = async(query, params) =>{\n\n\n\n\n  let savedData = [];\n  console.log('Id passed with the query ',params )\n\n  try {\n    await fetch('http://localhost:3005/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: query,\n        variables: {paramId: params}\n      })\n    }).then(r => {\n      \n      return  r.json()\n    })\n      .then(levels => {\n        savedData = levels;\n        console.log('FETCH AT ACTIONS ()',savedData)\n        // return (dispatch) => {\n        //   dispatch(accessLevelActions.apiFetchData([...savedData]));\n\n        // };\n        \n      })\n      .catch(error => {\n        throw Error(error)\n      });\n\n  } catch (error) {\n    throw Error(error)\n  }\n\n  return savedData;\n\n  /* return async (dispach) =>{\n    await dispach(accessLevelActions.apiFetchData(payload));\n  } */\n\n}\n\n\n\nexport const apiSaveData = async (payload, mutation) => {\n\n  console.log('payload ====== ',payload);\n  console.log('mutation ====== ',mutation);\n\n \n\n  let savedData = [];\n\n  try {\n    await fetch('http://localhost:3005/graphql', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({\n        query: mutation,\n        // 2 dimensions array with all the elements at index 0, then loop the rest using i\n        variables:payload,\n\n      })\n    }).then(r => {\n      \n      return  r.json()\n    })\n      .then(data => {\n        savedData = data;\n        // return (dispatch) => {\n        //   dispatch(accessLevelActions.apiFetchData([...savedData]));\n\n        // };\n        \n      })\n      .catch(error => {\n        throw Error(error)\n      });\n\n  } catch (error) {\n    throw Error(error)\n  }\n\n  return savedData;\n  \n \n}\n\n\nexport const getSelectedUser =  (data) => {\n  return async (dispach) =>{\n    await dispach(accessLevelActions.sele(data));\n  }\n\n}\n\n\nexport const showMessages =  (data) => {\n  return async (dispach) =>{\n    await dispach(accessLevelActions.apiFetchData(data));\n  }\n\n}\n "],"mappings":"AAAA,SAASA,kBAAkB,QAAQ,aAAa;AAEhD,SAASC,mBAAmB,QAAQ,oCAAoC;AACxE,SAASC,KAAK,QAAQ,aAAa;;AAEnC;;AAMA,OAAO,MAAMC,YAAY,GAAG,OAAMC,KAAK,EAAEC,MAAM,KAAI;EAKjD,IAAIC,SAAS,GAAG,EAAE;EAClBC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAACH,MAAM,CAAE;EAEhD,IAAI;IACF,MAAMI,KAAK,CAAC,+BAA+B,EAAE;MAC3CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBV,KAAK,EAAEA,KAAK;QACZW,SAAS,EAAE;UAACC,OAAO,EAAEX;QAAM;MAC7B,CAAC;IACH,CAAC,CAAC,CAACY,IAAI,CAACC,CAAC,IAAI;MAEX,OAAQA,CAAC,CAACC,IAAI,EAAE;IAClB,CAAC,CAAC,CACCF,IAAI,CAACG,MAAM,IAAI;MACdd,SAAS,GAAGc,MAAM;MAClBb,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAACF,SAAS,CAAC;MAC5C;MACA;;MAEA;IAEF,CAAC,CAAC,CACDe,KAAK,CAACC,KAAK,IAAI;MACd,MAAMC,KAAK,CAACD,KAAK,CAAC;IACpB,CAAC,CAAC;EAEN,CAAC,CAAC,OAAOA,KAAK,EAAE;IACd,MAAMC,KAAK,CAACD,KAAK,CAAC;EACpB;EAEA,OAAOhB,SAAS;;EAEhB;AACF;AACA;AAEA,CAAC;;AAID,OAAO,MAAMkB,WAAW,GAAG,OAAOC,OAAO,EAAEC,QAAQ,KAAK;EAEtDnB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAACiB,OAAO,CAAC;EACtClB,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAACkB,QAAQ,CAAC;EAIxC,IAAIpB,SAAS,GAAG,EAAE;EAElB,IAAI;IACF,MAAMG,KAAK,CAAC,+BAA+B,EAAE;MAC3CC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACnBV,KAAK,EAAEsB,QAAQ;QACf;QACAX,SAAS,EAACU;MAEZ,CAAC;IACH,CAAC,CAAC,CAACR,IAAI,CAACC,CAAC,IAAI;MAEX,OAAQA,CAAC,CAACC,IAAI,EAAE;IAClB,CAAC,CAAC,CACCF,IAAI,CAACU,IAAI,IAAI;MACZrB,SAAS,GAAGqB,IAAI;MAChB;MACA;;MAEA;IAEF,CAAC,CAAC,CACDN,KAAK,CAACC,KAAK,IAAI;MACd,MAAMC,KAAK,CAACD,KAAK,CAAC;IACpB,CAAC,CAAC;EAEN,CAAC,CAAC,OAAOA,KAAK,EAAE;IACd,MAAMC,KAAK,CAACD,KAAK,CAAC;EACpB;EAEA,OAAOhB,SAAS;AAGlB,CAAC;AAGD,OAAO,MAAMsB,eAAe,GAAKD,IAAI,IAAK;EACxC,OAAO,MAAOE,OAAO,IAAI;IACvB,MAAMA,OAAO,CAAC7B,kBAAkB,CAAC8B,IAAI,CAACH,IAAI,CAAC,CAAC;EAC9C,CAAC;AAEH,CAAC;AAGD,OAAO,MAAMI,YAAY,GAAKJ,IAAI,IAAK;EACrC,OAAO,MAAOE,OAAO,IAAI;IACvB,MAAMA,OAAO,CAAC7B,kBAAkB,CAACG,YAAY,CAACwB,IAAI,CAAC,CAAC;EACtD,CAAC;AAEH,CAAC"},"metadata":{},"sourceType":"module"}