{"ast":null,"code":"import { ApolloClient, ApolloLink, concat, InMemoryCache } from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from '@apollo/client/link/error';\nimport { createUploadLink } from 'apollo-upload-client';\n\n// const { REACT_APP_URL } = process.env;\n\n/**URL for the server */\nconst uploadLink = createUploadLink({\n  //uri: 'http://localhost:9005/playground',\n  uri: 'http://localhost:3005'\n});\n\n// Log any GraphQL errors or network error that occurred\nconst errorLink = onError(_ref => {\n  let {\n    graphQLErrors,\n    networkError\n  } = _ref;\n  if (graphQLErrors) graphQLErrors.map(_ref2 => {\n    let {\n      message,\n      locations,\n      path\n    } = _ref2;\n    return (\n      // eslint-disable-next-line no-console\n      console.log(`[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`)\n    );\n  });\n  // eslint-disable-next-line no-console\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\nconst authMiddleware = setContext((_, _ref3) => {\n  let {\n    headers\n  } = _ref3;\n  const token = localStorage.getItem('state');\n\n  // add the authorization to the headers\n  if (token) {\n    const jwt = JSON.parse(token)['auth']['access_token'];\n    return {\n      headers: {\n        ...headers,\n        Authorization: token ? `JWT ${jwt}` : ''\n      }\n    };\n  }\n});\nconst defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'cache-and-network',\n    errorPolicy: 'ignore'\n  },\n  query: {\n    fetchPolicy: 'cache-and-network',\n    errorPolicy: 'all'\n  }\n};\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: ApolloLink.from([errorLink.concat(concat(authMiddleware, uploadLink))]),\n  credentials: 'include',\n  defaultOptions: defaultOptions,\n  onError: error => error\n});\nexport { client };","map":{"version":3,"names":["ApolloClient","ApolloLink","concat","InMemoryCache","setContext","onError","createUploadLink","uploadLink","uri","errorLink","graphQLErrors","networkError","map","message","locations","path","console","log","authMiddleware","_","headers","token","localStorage","getItem","jwt","JSON","parse","Authorization","defaultOptions","watchQuery","fetchPolicy","errorPolicy","query","client","cache","link","from","credentials","error"],"sources":["/home/agik/agik/projects/Studies/kargeno-client/src/graphql/apolloClient.js"],"sourcesContent":["import {\n  ApolloClient,\n  ApolloLink,\n  concat,\n  InMemoryCache,\n} from '@apollo/client';\nimport { setContext } from 'apollo-link-context';\nimport { onError } from '@apollo/client/link/error';\nimport { createUploadLink } from 'apollo-upload-client';\n\n// const { REACT_APP_URL } = process.env;\n\n/**URL for the server */\nconst uploadLink = createUploadLink({\n  //uri: 'http://localhost:9005/playground',\n  uri: 'http://localhost:3005',\n});\n\n// Log any GraphQL errors or network error that occurred\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\n  if (graphQLErrors)\n    graphQLErrors.map(({ message, locations, path }) =>\n      // eslint-disable-next-line no-console\n      console.log(\n        `[GraphQL error]: Message: ${message}, Location: ${locations}, Path: ${path}`\n      )\n    );\n  // eslint-disable-next-line no-console\n  if (networkError) console.log(`[Network error]: ${networkError}`);\n});\n\nconst authMiddleware = setContext((_, { headers }) => {\n  const token = localStorage.getItem('state');\n\n  // add the authorization to the headers\n  if (token) {\n    const jwt = JSON.parse(token)['auth']['access_token'];\n\n    return {\n      headers: {\n        ...headers,\n        Authorization: token ? `JWT ${jwt}` : '',\n      },\n    };\n  }\n});\n\nconst defaultOptions = {\n  watchQuery: {\n    fetchPolicy: 'cache-and-network',\n    errorPolicy: 'ignore',\n  },\n\n  query: {\n    fetchPolicy: 'cache-and-network',\n    errorPolicy: 'all',\n  },\n};\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: ApolloLink.from([errorLink.concat(concat(authMiddleware, uploadLink))]),\n  credentials: 'include',\n  defaultOptions: defaultOptions,\n  onError: (error) => error,\n});\n\nexport { client };\n"],"mappings":"AAAA,SACEA,YAAY,EACZC,UAAU,EACVC,MAAM,EACNC,aAAa,QACR,gBAAgB;AACvB,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,OAAO,QAAQ,2BAA2B;AACnD,SAASC,gBAAgB,QAAQ,sBAAsB;;AAEvD;;AAEA;AACA,MAAMC,UAAU,GAAGD,gBAAgB,CAAC;EAClC;EACAE,GAAG,EAAE;AACP,CAAC,CAAC;;AAEF;AACA,MAAMC,SAAS,GAAGJ,OAAO,CAAC,QAAqC;EAAA,IAApC;IAAEK,aAAa;IAAEC;EAAa,CAAC;EACxD,IAAID,aAAa,EACfA,aAAa,CAACE,GAAG,CAAC;IAAA,IAAC;MAAEC,OAAO;MAAEC,SAAS;MAAEC;IAAK,CAAC;IAAA;MAC7C;MACAC,OAAO,CAACC,GAAG,CACR,6BAA4BJ,OAAQ,eAAcC,SAAU,WAAUC,IAAK,EAAC;IAC9E;EAAA,EACF;EACH;EACA,IAAIJ,YAAY,EAAEK,OAAO,CAACC,GAAG,CAAE,oBAAmBN,YAAa,EAAC,CAAC;AACnE,CAAC,CAAC;AAEF,MAAMO,cAAc,GAAGd,UAAU,CAAC,CAACe,CAAC,YAAkB;EAAA,IAAhB;IAAEC;EAAQ,CAAC;EAC/C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;;EAE3C;EACA,IAAIF,KAAK,EAAE;IACT,MAAMG,GAAG,GAAGC,IAAI,CAACC,KAAK,CAACL,KAAK,CAAC,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC;IAErD,OAAO;MACLD,OAAO,EAAE;QACP,GAAGA,OAAO;QACVO,aAAa,EAAEN,KAAK,GAAI,OAAMG,GAAI,EAAC,GAAG;MACxC;IACF,CAAC;EACH;AACF,CAAC,CAAC;AAEF,MAAMI,cAAc,GAAG;EACrBC,UAAU,EAAE;IACVC,WAAW,EAAE,mBAAmB;IAChCC,WAAW,EAAE;EACf,CAAC;EAEDC,KAAK,EAAE;IACLF,WAAW,EAAE,mBAAmB;IAChCC,WAAW,EAAE;EACf;AACF,CAAC;AAED,MAAME,MAAM,GAAG,IAAIjC,YAAY,CAAC;EAC9BkC,KAAK,EAAE,IAAI/B,aAAa,EAAE;EAC1BgC,IAAI,EAAElC,UAAU,CAACmC,IAAI,CAAC,CAAC3B,SAAS,CAACP,MAAM,CAACA,MAAM,CAACgB,cAAc,EAAEX,UAAU,CAAC,CAAC,CAAC,CAAC;EAC7E8B,WAAW,EAAE,SAAS;EACtBT,cAAc,EAAEA,cAAc;EAC9BvB,OAAO,EAAGiC,KAAK,IAAKA;AACtB,CAAC,CAAC;AAEF,SAASL,MAAM"},"metadata":{},"sourceType":"module"}